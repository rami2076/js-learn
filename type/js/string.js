//文字列リテラルは"または'を使用する。
document.write("<p>ダブルクォートで出力</p>");
document.write('<p>シングルクォートで出力</p>');
//特殊な文字
document.write('<p>"ダブルクォートをシングルクォートで囲み出力"</p>');
document.write("<p>'シングルクォートをダブルクォートで囲み出力'</p>");
//囲み文字の違いによる文字列の出力以外に特殊文字を出力する場合はエスケープシークエンスを使用する。
document.write("<p>\'シングルクォートをエスケープシークエンスを使用して出力</p>");
document.write("<p>\\エスケープシークエンスをエスケープシークエンスを使用して出力</p>");
document.write("<p>エスケープシークエンス一覧</p>");
//行末に\バックスラッシュを付与すると複数行の文字列を認識させることが可能。
//ECMAScript3->複数行の文字列の記述は非推奨。解析エンジンは認識する。+で結合することを推奨。
//ECMAScript5->テンプレートリテラルが導入\nを使用することで複数行の記述が可能に
//ECMAScript6->テンプレートリテラルの強化によりエスケープ文字を使用せずに記述可能となる。バッククォート`hoge`で囲むことで可能。
document.write("\
                <ul>\
                    <li>\\b=\tバックスペース\
                    <li>\\t=\t水平タブ\
                    <li>\\v=\t垂直タブ\
                    <li>\\n=\t改行\
                    <li>\\r=\t復帰\
                    <li>\\f=\t改ページ\
                    <li>\\\'=\tシングルクォーテーション\
                    <li>\\\"=\tダブルクォーテーション\
                    <li>\\=\tエスケープ文字\
                    <li>\\0=\tnull文字\
                    <li>\\xXX=\t2桁のXX(16進数)が表すLatin-1文字\
                    <li>\\uXXXX=\t4桁のXXXX(16進数)が表すunicode文字\
                </ul>\
               ")



//テンプレートリテラル
//ES2015

//改行
console.log(`
複数行の
文字列の
記述。
`);


//変数の補完
const tempStr = "文字列";
console.log(`これは${tempStr}です。`);

//nullリテラル
const foo = null;
console.log(foo);



